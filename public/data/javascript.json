[
  {
    "categoryName": "Array Manipulation",
    "snippets": [
      {
        "title": "Slugify String",
        "description": "Converts a string into a URL-friendly slug format.",
        "code": [
          "const slugify = (string, separator = \"-\") => {",
          "  return string",
          "    .toString() // Cast to string (optional)",
          "    .toLowerCase() // Convert the string to lowercase letters",
          "    .trim() // Remove whitespace from both sides of a string (optional)",
          "    .replace(/\\s+/g, separator) // Replace spaces with {separator}",
          "    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars",
          "    .replace(/\\_/g, separator) // Replace _ with {separator}",
          "    .replace(/\\-\\-+/g, separator) // Replace multiple - with single {separator}",
          "    .replace(/\\-$/g, \"\"); // Remove trailing -",
          "};",
          "",
          "// Usage:",
          "const title = \"Hello, World! This is a Test.\";",
          "console.log(slugify(title)); // Output: 'hello-world-this-is-a-test'",
          "console.log(slugify(title, \"_\")); // Output: 'hello_world_this_is_a_test'"
        ],
        "tags": ["javascript", "string", "slug", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate values from an array.",
        "code": [
          "const removeDuplicates = (arr) => [...new Set(arr)];",
          "",
          "// Usage:",
          "const numbers = [1, 2, 2, 3, 4, 4, 5];",
          "console.log(removeDuplicates(numbers)); // Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["javascript", "array", "deduplicate", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Flatten Array",
        "description": "Flattens a multi-dimensional array.",
        "code": [
          "const flattenArray = (arr) => arr.flat(Infinity);",
          "",
          "// Usage:",
          "const nestedArray = [1, [2, [3, [4]]]];",
          "console.log(flattenArray(nestedArray)); // Output: [1, 2, 3, 4]"
        ],
        "tags": ["javascript", "array", "flatten", "utility"],
        "author": "technoph1le"
      }
    ]
  },
  {
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Capitalize String",
        "description": "Capitalizes the first letter of a string.",
        "code": [
          "const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);",
          "",
          "// Usage:",
          "console.log(capitalize('hello')); // Output: 'Hello'"
        ],
        "tags": ["javascript", "string", "capitalize", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "const reverseString = (str) => str.split('').reverse().join('');",
          "",
          "// Usage:",
          "console.log(reverseString('hello')); // Output: 'olleh'"
        ],
        "tags": ["javascript", "string", "reverse", "utility"],
        "author": "technoph1le"
      }
    ]
  },
  {
    "categoryName": "Date and Time",
    "snippets": [
      {
        "title": "Format Date",
        "description": "Formats a date in 'YYYY-MM-DD' format.",
        "code": [
          "const formatDate = (date) => date.toISOString().split('T')[0];",
          "",
          "// Usage:",
          "console.log(formatDate(new Date())); // Output: '2024-12-10'"
        ],
        "tags": ["javascript", "date", "format", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Get Time Difference",
        "description": "Calculates the time difference in days between two dates.",
        "code": [
          "const getTimeDifference = (date1, date2) => {",
          "  const diff = Math.abs(date2 - date1);",
          "  return Math.ceil(diff / (1000 * 60 * 60 * 24));",
          "};",
          "",
          "// Usage:",
          "const date1 = new Date('2024-01-01');",
          "const date2 = new Date('2024-12-31');",
          "console.log(getTimeDifference(date1, date2)); // Output: 365"
        ],
        "tags": ["javascript", "date", "time-difference", "utility"],
        "author": "technoph1le"
      }
    ]
  },
  {
    "categoryName": "Function Utilities",
    "snippets": [
      {
        "title": "Repeat Function Invocation",
        "description": "Invokes a function a specified number of times.",
        "code": [
          "const times = (func, n) => {",
          "  Array.from(Array(n)).forEach(() => {",
          "    func();",
          "  });",
          "};",
          "",
          "// Usage:",
          "const randomFunction = () => console.log('Function called!');",
          "times(randomFunction, 3); // Logs 'Function called!' three times"
        ],
        "tags": ["javascript", "function", "repeat", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Debounce Function",
        "description": "Delays a function execution until after a specified time.",
        "code": [
          "const debounce = (func, delay) => {",
          "  let timeout;",
          "  return (...args) => {",
          "    clearTimeout(timeout);",
          "    timeout = setTimeout(() => func(...args), delay);",
          "  };",
          "};",
          "",
          "// Usage:",
          "window.addEventListener('resize', debounce(() => console.log('Resized!'), 500));"
        ],
        "tags": ["javascript", "utility", "debounce", "performance"],
        "author": "technoph1le"
      },
      {
        "title": "Throttle Function",
        "description": "Limits a function execution to once every specified time interval.",
        "code": [
          "const throttle = (func, limit) => {",
          "  let lastFunc;",
          "  let lastRan;",
          "  return (...args) => {",
          "    const context = this;",
          "    if (!lastRan) {",
          "      func.apply(context, args);",
          "      lastRan = Date.now();",
          "    } else {",
          "      clearTimeout(lastFunc);",
          "      lastFunc = setTimeout(() => {",
          "        if (Date.now() - lastRan >= limit) {",
          "          func.apply(context, args);",
          "          lastRan = Date.now();",
          "        }",
          "      }, limit - (Date.now() - lastRan));",
          "    }",
          "  };",
          "};",
          "",
          "// Usage:",
          "document.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 1000));"
        ],
        "tags": ["javascript", "utility", "throttle", "performance"],
        "author": "technoph1le"
      },
      {
        "title": "Get URL Parameters",
        "description": "Extracts the parameters from the URL's query string and returns them as an object.",
        "code": [
          "function getURLParams() {",
          "  const params = {};",
          "  const queryString = window.location.search.substring(1);",
          "  const pairs = queryString.split('&');",
          "  pairs.forEach(function(pair) {",
          "    const [key, value] = pair.split('=');",
          "    params[key] = decodeURIComponent(value);",
          "  });",
          "  return params;",
          "}"
        ],
        "tags": ["javascript", "utility", "url", "parameters"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Get Multiple URL Query Parameters",
        "description": "Extracts specific query parameters from the URL's query string based on an array of parameter names.",
        "code": [
          "function getMultipleURLParams(paramNames) {",
          "  const params = {};",
          "  const queryString = window.location.search.substring(1);",
          "  const pairs = queryString.split('&');",
          "  pairs.forEach(function(pair) {",
          "    const [key, value] = pair.split('=');",
          "    if (paramNames.includes(key)) {",
          "      params[key] = decodeURIComponent(value);",
          "    }",
          "  });",
          "  return params;",
          "}"
        ],
        "tags": ["javascript", "url", "queryparams", "utility", "multiple"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Build a Query String from an Object",
        "description": "Converts an object of key-value pairs into a URL query string.",
        "code": [
          "function getQueryString(params) {",
          "  const queryString = Object.keys(params)",
          "    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))",
          "    .join('&');",
          "  return queryString;",
          "}"
        ],
        "tags": ["javascript", "url", "querystring", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Device Type Detection",
        "description": "Detects the device type (mobile, tablet, desktop) based on the user-agent string, including specific device checks for mobile phones, tablets, and desktops.",
        "code": [
          "function detectDeviceType() {",
          "  const userAgent = navigator.userAgent.toLowerCase();",
          "",
          "  // Check for mobile devices (smartphones)",
          "  if (/mobile/.test(userAgent)) {",
          "    if (/android/.test(userAgent)) {",
          "      // Android mobile devices",
          "      return 'mobile (Android)';",
          "    } else if (/iphone|ipod/.test(userAgent)) {",
          "      // iPhone or iPod devices",
          "      return 'mobile (iOS)';",
          "    } else if (/windows phone/.test(userAgent)) {",
          "      // Windows Phone devices",
          "      return 'mobile (Windows Phone)';",
          "    }",
          "    // Default for other mobile devices",
          "    return 'mobile (Unknown)';",
          "  }",
          "",
          "  // Check for tablet devices",
          "  if (/tablet/.test(userAgent) || /ipad/.test(userAgent)) {",
          "    if (/android/.test(userAgent)) {",
          "      // Android tablets",
          "      return 'tablet (Android)';",
          "    } else if (/ipad/.test(userAgent)) {",
          "      // iPad devices",
          "      return 'tablet (iOS)';",
          "    }",
          "    // Default for other tablets",
          "    return 'tablet (Unknown)';",
          "  }",
          "",
          "  // Check for desktop or laptop devices",
          "  if (/windows/.test(userAgent)) {",
          "    return 'desktop (Windows)';",
          "  } else if (/macintosh|mac os x/.test(userAgent)) {",
          "    return 'desktop (Mac)';",
          "  } else if (/linux/.test(userAgent)) {",
          "    return 'desktop (Linux)';",
          "  } else if (/cros/.test(userAgent)) {",
          "    return 'desktop (Chrome OS)';",
          "  }",
          "",
          "  // Fallback to 'desktop' for all other cases",
          "  return 'desktop (Unknown)';",
          "}"
        ],
        "tags": [
          "javascript",
          "device detection",
          "user-agent",
          "mobile",
          "tablet",
          "desktop",
          "utility"
        ],
        "author": "Chirantan Patra"
      },
      {
        "title": "Deep Clone an Object",
        "description": "Creates a deep clone of an object or array, recursively copying all properties and values.",
        "code": [
          "function deepClone(obj) {",
          "  if (obj === null || typeof obj !== 'object') {",
          "    return obj;",
          "  }",
          "  if (Array.isArray(obj)) {",
          "    return obj.map(deepClone);",
          "  }",
          "  const clonedObj = {};",
          "  for (const key in obj) {",
          "    if (obj.hasOwnProperty(key)) {",
          "      clonedObj[key] = deepClone(obj[key]);",
          "    }",
          "  }",
          "  return clonedObj;",
          "}"
        ],
        "tags": ["javascript", "object", "clone", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Get Base URL",
        "description": "Extracts the base URL (protocol + hostname + port) from the current URL.",
        "code": [
          "function getURLBase() {",
          "  const url = new URL(window.location.href);",
          "  return url.origin;",
          "}"
        ],
        "tags": ["javascript", "url", "baseurl", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Email Validation with Disposable Domain Check",
        "description": "Validates an email address format and checks if the domain is from a disposable email provider by fetching the list of disposable domains from a remote GitHub repository.",
        "code": [
          "async function validateEmail(email) {",
          "  // Trim leading/trailing spaces",
          "  email = email.trim();",
          "",
          "  // Basic email regex pattern",
          "  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;",
          "",
          "  // Fetch disposable domains list from GitHub",
          "  const disposableDomainsUrl = 'https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/refs/heads/main/disposable_email_blocklist.conf';",
          "",
          "  let disposableDomains = [];",
          "  try {",
          "    // Fetch the disposable domain list",
          "    const response = await fetch(disposableDomainsUrl);",
          "    const text = await response.text();",
          "",
          "    // Split text into lines, filter empty ones, and extract domains",
          "    disposableDomains = text",
          "      .split('\\n')",
          "      .filter(line => line.trim() !== '' && !line.startsWith('#')) // Remove comments and empty lines",
          "      .map(line => line.trim().toLowerCase()); // Convert each domain to lowercase",
          "  } catch (error) {",
          "    return { valid: false, message: 'Failed to fetch disposable domain list.' };",
          "  }",
          "",
          "  // Regex validation check",
          "  if (!emailRegex.test(email)) {",
          "    return { valid: false, message: 'Invalid email format.' };",
          "  }",
          "",
          "  // Split email into local and domain parts",
          "  const [localPart, domainPart] = email.toLowerCase().split('@');",
          "",
          "  // Check for valid domain (must contain a dot)",
          "  if (domainPart.indexOf('.') === -1) {",
          "    return { valid: false, message: 'Domain must contain a dot.' };",
          "  }",
          "",
          "  // Check if local part or domain part is too long",
          "  if (localPart.length > 64 || domainPart.length > 253) {",
          "    return { valid: false, message: 'Local part or domain part is too long.' };",
          "  }",
          "",
          "  // Check for invalid characters in the local part",
          "  const invalidChars = /[^w!#$%&'*+/=?^_`{|}~-]/;",
          "  if (invalidChars.test(localPart)) {",
          "    return { valid: false, message: 'Local part contains invalid characters.' };",
          "  }",
          "",
          "  // Check for consecutive dots in the local or domain part",
          "  if (/(..)/.test(localPart) || /(..)/.test(domainPart)) {",
          "    return { valid: false, message: 'Consecutive dots are not allowed.' };",
          "  }",
          "",
          "  // Check if local part starts or ends with a dot",
          "  if (/^\\./.test(localPart) || /\\.$/.test(localPart)) {",
          "    return { valid: false, message: 'Local part cannot start or end with a dot.' };",
          "  }",
          "",
          "  // Check if domain part starts or ends with a hyphen",
          "  if (/^-/.test(domainPart) || /-$/.test(domainPart)) {",
          "    return { valid: false, message: 'Domain part cannot start or end with a hyphen.' };",
          "  }",
          "",
          "  // Check for disposable email addresses (temporary mails)",
          "  const domain = domainPart.toLowerCase();",
          "  if (disposableDomains.includes(domain)) {",
          "    return { valid: false, message: 'Temporary email addresses are not allowed.' };",
          "  }",
          "",
          "  // If all checks pass, return valid",
          "  return { valid: true, message: 'Valid email address.' };",
          "}"
        ],
        "tags": ["javascript", "email", "validation", "disposable", "utility"],
        "author": "Chirantan Patra"
      }
    ]
  },
  {
    "categoryName": "DOM Manipulation",
    "snippets": [
      {
        "title": "Toggle Class",
        "description": "Toggles a class on an element.",
        "code": [
          "const toggleClass = (element, className) => {",
          "  element.classList.toggle(className);",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "toggleClass(element, 'active');"
        ],
        "tags": ["javascript", "dom", "class", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Smooth Scroll to Element",
        "description": "Scrolls smoothly to a specified element.",
        "code": [
          "const smoothScroll = (element) => {",
          "  element.scrollIntoView({ behavior: 'smooth' });",
          "};",
          "",
          "// Usage:",
          "const target = document.querySelector('#target');",
          "smoothScroll(target);"
        ],
        "tags": ["javascript", "dom", "scroll", "ui"],
        "author": "technoph1le"
      },
      {
        "title": "Add Class to an Element",
        "description": "Adds a specified class to an HTML element.",
        "code": [
          "function addClass(element, className) {",
          "  element.classList.add(className);",
          "}"
        ],
        "tags": ["javascript", "dom", "class", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Remove Class from an Element",
        "description": "Removes a specified class from an HTML element.",
        "code": [
          "function removeClass(element, className) {",
          "  element.classList.remove(className);",
          "}"
        ],
        "tags": ["javascript", "dom", "class", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Set Text Content of an Element",
        "description": "Sets the text content of an HTML element.",
        "code": [
          "function setTextContent(element, text) {",
          "  element.textContent = text;",
          "}"
        ],
        "tags": ["javascript", "dom", "text", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Show Loading Spinner",
        "description": "Displays a loading spinner overlay on the page while an async operation is in progress.",
        "code": [
          "function showLoadingSpinner() {",
          "  const spinner = document.createElement('div');",
          "  spinner.className = 'spinner';",
          "  document.body.appendChild(spinner);",
          "}",
          "function hideLoadingSpinner() {",
          "  const spinner = document.querySelector('.spinner');",
          "  if (spinner) spinner.remove();",
          "}"
        ],
        "tags": ["javascript", "loading", "spinner", "utility"],
        "author": "Chirantan Patra"
      },
      {
        "title": "Show/Hide Loading Spinner(with CSS)",
        "description": "Shows and hides a loading spinner on the page when triggered, using CSS for animation.",
        "code": [
          "function showLoadingSpinner() {",
          "  // Create a div element to represent the spinner",
          "  const spinner = document.createElement('div');",
          "  spinner.className = 'spinner';",
          "",
          "  // Create a spinner message container",
          "  const message = document.createElement('div');",
          "  message.className = 'spinner-message';",
          "  message.textContent = 'Loading...';",
          "  spinner.appendChild(message);",
          "",
          "  // Append the spinner to the body",
          "  document.body.appendChild(spinner);",
          "}",
          "",
          "function hideLoadingSpinner() {",
          "  // Find the spinner element and remove it if it exists",
          "  const spinner = document.querySelector('.spinner');",
          "  if (spinner) spinner.remove();",
          "}",
          "",
          "// CSS styles to make the spinner visually appealing",
          "const style = document.createElement('style');",
          "style.innerHTML = `",
          "  /* Spinner container to cover the whole page */",
          "  .spinner {",
          "    position: fixed;",
          "    top: 0;",
          "    left: 0;",
          "    width: 100%;",
          "    height: 100%;",
          "    background-color: rgba(0, 0, 0, 0.5);",
          "    display: flex;",
          "    justify-content: center;",
          "    align-items: center;",
          "    z-index: 9999;",
          "  }",
          "",
          "  /* Spinner itself */",
          "  .spinner::before {",
          "    content: '';",
          "    width: 50px;",
          "    height: 50px;",
          "    border: 5px solid rgba(255, 255, 255, 0.3);",
          "    border-top: 5px solid white;",
          "    border-radius: 50%;",
          "    animation: spin 1s linear infinite;",
          "  }",
          "",
          "  /* Spinner message style */",
          "  .spinner-message {",
          "    color: white;",
          "    font-size: 16px;",
          "    margin-top: 10px;",
          "  }",
          "",
          "  /* Spin animation for the spinner */",
          "  @keyframes spin {",
          "    0% {",
          "      transform: rotate(0deg);",
          "    }",
          "    100% {",
          "      transform: rotate(360deg);",
          "    }",
          "  }",
          "`;",
          "document.head.appendChild(style);"
        ],
        "tags": ["javascript", "spinner", "loading", "UI", "utility"],
        "author": "Chirantan Patra"
      }
    ]
  },
  {
    "categoryName": "Local Storage",
    "snippets": [
      {
        "title": "Add Item to localStorage",
        "description": "Stores a value in localStorage under the given key.",
        "code": [
          "const addToLocalStorage = (key, value) => {",
          "  localStorage.setItem(key, JSON.stringify(value));",
          "};",
          "",
          "// Usage:",
          "addToLocalStorage('user', { name: 'John', age: 30 });"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Retrieve Item from localStorage",
        "description": "Retrieves a value from localStorage by key and parses it.",
        "code": [
          "const getFromLocalStorage = (key) => {",
          "  const item = localStorage.getItem(key);",
          "  return item ? JSON.parse(item) : null;",
          "};",
          "",
          "// Usage:",
          "const user = getFromLocalStorage('user');",
          "console.log(user); // Output: { name: 'John', age: 30 }"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "technoph1le"
      },
      {
        "title": "Clear All localStorage",
        "description": "Clears all data from localStorage.",
        "code": [
          "const clearLocalStorage = () => {",
          "  localStorage.clear();",
          "};",
          "",
          "// Usage:",
          "clearLocalStorage(); // Removes all items from localStorage"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "technoph1le"
      }
    ]
  }
]
